#include<iostream>
#include<vector>
#include<algorithm>
#include<queue> 

using namespace std; 

int answer=0;
int M,N,K;
int map[51][51] ={0,};
bool visit[51][51] ={false,};
int dir[4][2] = {{0,1},{1,0},{0,-1},{-1,0}};
bool isrange(int x,int y){

	if(0>x || 0> y ||x>=M ||y>=N){
		return false;
	}
	else {
		return true;
	}

}
queue<pair<int,int>> q;

int bfs(int x,int y){

	if(visit[x][y]) return 0;

	visit[x][y] = true;
	q.push(make_pair(x,y));

	while(!q.empty()){
		pair<int,int> current =q.front();
		q.pop();
		int now_x = current.first;
		int now_y = current.second;
		for(int i=0;i<4;i++){
			int next_x = now_x+dir[i][0];
			int next_y = now_y+dir[i][1];
			if(isrange(next_x,next_y) && !visit[next_x][next_y] && map[next_x][next_y]==1){
				visit[next_x][next_y] =true;
				q.push(make_pair(next_x,next_y));
			}
		}
	}
	return 1;

}

int main() {
	int T;
	cin >> T;
	int temp1,temp2;
	for(int i=1;i<=T;i++){
		scanf(" %d %d %d",&M,&N,&K);

		for(int j=0;j<K;j++){
			scanf(" %d %d",&temp1,&temp2);		
			map[temp1][temp2] = 1;
		}
		int accum=0;
		for(int idx1=0;idx1<M;idx1++){
			for(int idx2=0;idx2<N;idx2++){
				if(map[idx1][idx2]==1 && !visit[idx1][idx2]) 
				{
					accum+=bfs(idx1,idx2);
				}
			}
		}
		
		printf("%d\n",accum);
		accum=1;

    //init map and visit tablle
		for(int idx1=0;idx1<M;idx1++){
			for(int idx2=0;idx2<N;idx2++){
				visit[idx1][idx2] =false;
				map[idx1][idx2] = 0;
			}
		}
	}


	return 0;
}
