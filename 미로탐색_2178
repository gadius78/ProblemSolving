#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<queue>


using namespace std;
int N,M;

int map[101][101]={0,};
bool visit[101][101]={false,};

queue< pair<pair<int,int>,int> > q;

bool isRange(int x,int y){
	if(0<=x && x<N && 0<=y && y<M) return true;
	else return false;
	
}


int dir[4][2] = {{0,1},{0,-1},{1,0},{-1,0}};

void bfs(int x,int y){
	if(!isRange(x,y)) return;
	
	visit[x][y] = true;
	q.push( make_pair(make_pair(x,y),1));
	while(!q.empty()){
		pair<pair<int,int>,int> now =q.front();
		q.pop();
		
		for(int i=0;i<4;i++){
			int dirx = now.first.first + dir[i][0];
			int diry = now.first.second + dir[i][1];
			int n_cnt = now.second;
			if(map[dirx][diry]==1 && isRange(dirx,diry) && visit[dirx][diry] == false){
				map[dirx][diry] = n_cnt+1;
				visit[dirx][diry] = true;		
				q.push(make_pair(make_pair(dirx,diry),n_cnt+1));
			}
		}
				
		
		
	}
	
}

int main(){

	cin >>N >> M;
	
	for(int i=0;i<N;i++){
		for(int idx2=0;idx2<M;idx2++){
			scanf("%1d",&map[i][idx2]);
		}
	}
	
	bfs(0,0);
	cout << map[N-1][M-1];	
	return 0;
}
