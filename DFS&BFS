#include<iostream>
#include<vector>
#include<numeric>
#include<algorithm>
#include<queue>
#include<memory.h>

using namespace std;

vector<int> graph[1001];
queue<int> q;

bool visit[1001]={false,};


void dfs(int now){
	visit[now] = true;
	cout << now << " ";
	int num_child = graph[now].size();
	for(int i=0;i<num_child ;i++){
		if(!visit[graph[now][i]] && graph[now][i]!=0){
			dfs(graph[now][i]);
		
		}
	}

}

void bfs(int start){
	visit[start] =true;
	q.push(start);

	
	while(!q.empty()){
		int front = q.front();
		int num_child =graph[front].size(); 
		q.pop();
		cout << front << " ";

		for(int i=0;i< num_child;i++){
			if(!visit[graph[front][i]] && graph[front][i]!=0){
				//cout <<"count push" << endl;
				visit[graph[front][i]] = true;
				q.push(graph[front][i]);
			}
		}
	
	}
	


}

int main(){
	int N,M,V;
	int t1,t2;
	cin >> N >> M >> V;	
	for(int i=0;i<M;i++){
		cin >> t1 >> t2;
		graph[t1].push_back(t2);
		graph[t2].push_back(t1);
	}
	for(int i=1;i<=N;i++){
		sort(graph[i].begin(),graph[i].end());
	
	}

	dfs(V);
	cout << endl;
	memset(visit,false,sizeof(visit));
	bfs(V);
	cout << endl;
	//cout <<"N : " << N << endl;
	//cout <<"M : " << M << endl;


	return 0;
}
