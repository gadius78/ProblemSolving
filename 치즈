#include<iostream>
#include<queue>
#include<vector>
#include<algorithm> 
#include<memory.h>
#include<cstdio>
using namespace std;
	
int row=0;
int col=0;
int cnt=0;
bool yet = false;
int ans=0;

int dir[4][2] = { {0,1},{0,-1},{1,0},{-1,0} };   
bool isRange(int x, int y){
	if( x>0 && x<=row && y>0 && y<=col)
	{return true;
	}
	else{
		return false;
	}
}
struct point{
	int x;
	int y;
	point(int a,int b){
		x=a;
		y=b;
	};
}; 
queue<point> q;
int map[101][101] ={0,}; 
bool visit[101][101] ={false,};

vector<int> v;
void bfs(int x,int y){
	cnt++;
	q.push(point(x,y));
	visit[x][y] = false;
	while(!q.empty()){
		point current = q.front();
		int cx=current.x;
		int cy=current.y;
		q.pop();
		
		for(int i=0;i<4;i++){
			int nx= cx+dir[i][0];
			int ny= cy+dir[i][1];
			if(!visit[nx][ny] && isRange(nx,ny)){
				if(map[nx][ny]==0){
					visit[nx][ny] =true;
					q.push(point(nx,ny));					
				}
				else if(map[nx][ny]==1){
					map[nx][ny] =3;
		//			cout << nx << " " << ny <<endl;
					visit[nx][ny] =true;
				
				}
				
			}
		}
		
	}

	
//	cout << endl;
	int aaa=0;
//	cout << "qq " << " " << cnt << endl;
	for(int i=1;i<=row;i++){
		for(int j=1;j<=col;j++){
			if(map[i][j]==3){
				map[i][j] =0;
				aaa++;
			}
		}
	}
//	cout <<aaa<< endl;

//	cout << cnt << " " << aaa << endl;
	v.push_back(aaa);
	
	for(int i=1;i<=row;i++){
		for(int j=1;j<=col;j++)
		{
			if(map[i][j] ==1){
				yet=true;
			}
	//		printf("%d ",map[i][j]);
		}
	//	cout << endl;
	}
	
	if(yet==false) v.push_back(aaa);
}



int main(){


	scanf("%d %d",&row,&col);
	for(int i=1;i<=row;i++){
		for(int j=1;j<=col;j++)
		{
			scanf("%d",&map[i][j]);
		}
	}

	
	bfs(1,1);
	
	for(int i=1;i<=row;i++){
		for(int j=1;j<=col;j++)
		{
			bfs(i,j);
			if(yet==false){
				cout << cnt-1 <<endl;
				cout << v[cnt-1];
				return 0;
			}
			
			yet=false;
			memset(visit,false,sizeof(visit));
		}
	}
	
	return 0;

}
