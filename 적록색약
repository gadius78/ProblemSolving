#include<iostream>
#include<cstdio>
#include<queue>
#include<algorithm>
#include<memory.h>

using namespace std;

queue< pair<int,int> > q;

bool visit[110][110] = {false,}; 
int map[110][110] = {0,};
int dir[4] = {0,0,-1,1};
int dir2[4] = {1,-1,0,0};



int color[2]={0,};

bool isRange(int x, int y,int N){
	if(x >=0 && y >=0 && x < N && y< N){
		return true;
	}
	else{
		return false;
	}
	
}

int normal(int x, int y, int N){
	if(visit[x][y]==true ) return 0;
	
	
	int now =map[x][y];
	
	q.push(make_pair(x,y));
	while(!q.empty()){
		pair<int,int> current = q.front();
		q.pop();
	//	cout << current.first << " / " << current.second << endl; 
		if(visit[current.first][current.second] == false && map[current.first][current.second] ==now ){
			visit[current.first][current.second] = true;
			
		}
		for(int i=0;i<4;i++){
			if(isRange(current.first+dir[i],current.second+dir2[i],N) && map[current.first+dir[i]][current.second+dir2[i]] ==now &&map[current.first+dir[i]][current.second+dir2[i]] ==now &&visit[current.first+dir[i]][current.second+dir2[i]]==false)
			{
				visit[current.first+dir[i]][current.second+dir2[i]]=true;
				q.push(make_pair(current.first+dir[i],current.second+dir2[i]));
			}
		}
		
		
	}
//	cout <<"----------------------------------" << endl;
	return 1;
	
}


int ubnormal(int x, int y, int N){
	if(visit[x][y]==true ) return 0;
	
	
	if(map[x][y] == 1 || map[x][y] ==2){
		color[0] =1;
		color[1] = 2;
	}
	else{
		color[0] =3;
		color[1] =3;
	}
	
	q.push(make_pair(x,y));
	while(!q.empty()){
		pair<int,int> current = q.front();
		q.pop();
	//	cout << current.first << " / " << current.second << endl; 
		if(visit[current.first][current.second] == false && (map[current.first][current.second] ==color[0] || map[current.first][current.second] ==color[1]) ){
			visit[current.first][current.second] = true;
		}
	
			
		for(int i=0;i<4;i++){
			if(isRange(current.first+dir[i],current.second+dir2[i],N) &&visit[current.first+dir[i]][current.second+dir2[i]]==false && ( map[current.first+dir[i]][current.second+dir2[i]] ==color[0] ||  map[current.first+dir[i]][current.second+dir2[i]] ==color[1] ))
			{
				visit[current.first+dir[i]][current.second+dir2[i]]=true;
				q.push(make_pair(current.first+dir[i],current.second+dir2[i]));
			}
		}
		
		
	}
//	cout <<"----------------------------------" << endl;
	return 1;
	
}

int main(){
	int N;
	char t1;
	int normalCount = 0;
	int ubnormalCount = 0;
	
	scanf("%d\n",&N);
	
	for(int idx=0;idx<N;idx++){
		for(int idx2=0;idx2<N;idx2++){
			scanf(" %1c",&t1);
			
			if(t1 =='R'){
				map[idx][idx2] = 1;
			}
			if(t1 =='G'){
				map[idx][idx2] = 2;
			}	
			if(t1 =='B'){
				map[idx][idx2] = 3;
			}		
		}		
	}

/*
	cout <<"===================================" << endl;
	
	for(int idx=0;idx<N;idx++){
		for(int idx2=0;idx2<N;idx2++){
			cout << map[idx][idx2];
		}		
		cout << endl;
	}
	cout <<"===================================" << endl;
*/	
	
	
	for(int idx=0;idx<N;idx++){
		for(int idx2=0;idx2<N;idx2++){
			
			normalCount += normal(idx,idx2,N); 
		}		
		
	}
	memset(visit,false,sizeof(visit));
	
	
//	ubnormal(0,0,N);
	
	
	for(int idx=0;idx<N;idx++){
		for(int idx2=0;idx2<N;idx2++){
			
			ubnormalCount += ubnormal(idx,idx2,N); 
		}		
		
	}
	
		
		
	cout << normalCount << " " <<ubnormalCount;	
		
		/*
	for(int idx=0;idx<N;idx++){
		for(int idx2=0;idx2<N;idx2++){
			cout << map[idx][idx2];
		}		
		cout << endl;
	}
*/
	return 0;
}
