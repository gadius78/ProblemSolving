#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>

using namespace std;

int M=0;
int N=0;

int map[102][102] ={0,};
int record[102][102] ={0,};
bool visit[102][102][5] = {false,};// 방향을 1234로 쓰기 위해 5로 선언 / 현재 좌표 기준으로 방향도 방문햇는지 보기 위해

int dir[5] = {0,0,0,1,-1};
int dir2[5] = {0,1,-1,0,0};

 
struct robot{
	int x,y,dir,cnt;
	robot(int a, int b, int c,int d){
		x=a;
		y=b;
		dir=c;
		cnt=d;
	};
};

queue<robot> q; 

bool isRange(int x,int y){
	if(0<x && x<=M && 0<y && y <=N){
		return true;
	}
	else{
		return false;
	}
}

void solution(int x,int y,int s_dir,int e_dir,int e_x,int e_y){	
	
	q.push(robot(x,y,s_dir,0));// 현재 상태 그대로 삽입(count까지)


	visit[x][y][s_dir] =true;

	while(!q.empty()){

		robot current = q.front();

		q.pop();	

		int a = current.x;
		int b= current.y;
		int n_d = current.dir;
		int n_c = current.cnt;
	
		if(a==e_x && b==e_y && n_d ==e_dir){
			cout << n_c<< endl;
			return;
		}
	
		for(int i=1;i<=3;i++){ // go 명령문 관련 경우의 수를 큐에 삽입
			int nx = (dir[n_d]*i) + a;
			int ny = (dir2[n_d]*i) + b;
			if(map[nx][ny]) break; // 갈려고 하는 거리가 1인가(갈수 있는 거리인가)

			if(visit[nx][ny][n_d]==false && isRange(nx,ny) && map[nx][ny]==0){

				visit[nx][ny][n_d]=true;
				q.push(robot(nx,ny,n_d,n_c+1));
						
			}
		}

		int next_dir_1, next_dir_2; // 방향 관련 경우의 수 삽입 / 동서인경우 갈수있는 것이 남북


        if(n_d == 1 || n_d == 2) {
            next_dir_1 = 3;
            next_dir_2 = 4;
        }
        else if(n_d==3 || n_d ==4 ){
            next_dir_1 = 1;
            next_dir_2 = 2;
        }
        if(visit[a][b][next_dir_1]==false) {

            visit[a][b][next_dir_1] = true;
			q.push(robot(a,b,next_dir_1,n_c+1));
            
        }
        if(visit[a][b][next_dir_2] ==false) {

			visit[a][b][next_dir_2] = true;
			q.push(robot(a,b,next_dir_2,n_c+1));
            
        }
	}	
}

int main(){
	
	scanf("%d %d",&M,&N);
	for(int i=1;i<=M;i++){
		for(int j=1;j<=N;j++){
			scanf("%d",&map[i][j]);
		}
	}	

	int s_x,s_y,e_x,e_y,s_dir,e_dir;	

	scanf(" %d %d %d",&s_x,&s_y,&s_dir);
	scanf(" %d %d %d",&e_x,&e_y,&e_dir);	

	//printf("%d %d %d %d %d %d",s_x,s_y,s_dir,e_dir,e_x,e_y);

	solution(s_x,s_y,s_dir,e_dir,e_x,e_y);	
	
	return 0;

}
