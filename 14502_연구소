#include<iostream>
#include<vector>
#include<numeric>
#include<algorithm>
#include<string>
#include<cstdlib>
#include<deque>
using namespace std;
int T;
int N, M;
int cnt = 0;

int arr[11][11];
bool visit[11][11];
int inital_arr[11][11];

typedef struct point {
	int x;
	int y;
	
}Point;

int dir[4][2] = { {0,1},{0,-1},{1,0},{-1,0} };
bool is_range(int x, int y) {
	if (x < 0 || x >= N || y < 0 || y >= M) {
		return false;
	}
	else {
		return true;
	}
}
int max_cnt = 0;
vector< pair<int, int> > v;
void sol(int index,int s_x, int s_y) {
	if (index >= 3) {
		deque<Point> q;
		Point temps;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				inital_arr[i][j] = arr[i][j];
			}
		}

		for (int i = 0; i < v.size(); i++) {
			visit[v[i].first][v[i].second] = true;
			temps.x = v[i].first;
			temps.y = v[i].second;
			q.push_back(temps);
		}
		while (!q.empty()) {
			Point current = q.front();
			q.pop_front();
			int now_x = current.x;
			int now_y = current.y;
			for (int idx = 0; idx < 4; idx++) {
				int next_x = now_x + dir[idx][0];
				int next_y = now_y + dir[idx][1];
				
				
				if (is_range(next_x, next_y) && !visit[next_x][next_y] && inital_arr[next_x][next_y] == 0) {
					inital_arr[next_x][next_y] = 2;
					Point ts;
					ts.x = next_x;
					ts.y = next_y;
					visit[next_x][next_y] = true;
					q.push_back(ts);
				}
			}
		}
		int sums = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (inital_arr[i][j] == 0) sums++;
			
			}
		}

		max_cnt = max(max_cnt, sums);
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				visit[i][j] = false;
			}
		}

		return;
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if(arr[i][j]==0){
				arr[i][j] = 1;
				sol(index + 1,i,j);
				arr[i][j] = 0;
			}
		}
	}
	

}
int main() {
	scanf(" %d %d", &N,&M);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			scanf(" %d", &arr[i][j]);
			if (arr[i][j] == 2) v.push_back(make_pair(i, j));
			visit[i][j] = false;
		}
	}
	sol(0,0,0);
	cout << max_cnt;
	return 0;

}
