#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
#include<cstdio>

using namespace std;

vector<int> temp;


int map[30][30]={0,};
bool visit[30][30]={false,};
int N;

queue<pair<int,int>> q;
int dir[4][2]={{0,1},{0,-1},{1,0},{-1,0}};

int bfs(int x,int y){
	int cnt =0;

	visit[x][y] = true;
	q.push(make_pair(x,y));
	cnt++;
	while(!q.empty()){
		pair<int,int> now = q.front();
		q.pop();

		for(int i=0;i<4;i++){
			int dirx = now.first+dir[i][0];
			int diry = now.second+dir[i][1];
			if(visit[dirx][diry] ==false && map[dirx][diry] ==1){
				visit[dirx][diry] = true;
				q.push(make_pair(dirx,diry));
				cnt++;

			}
		}

	}
	return cnt++;

}
int main(){
	vector<int> ans;
	cin >> N;
	for(int i=0;i<N;i++){
		for(int j=0;j<N;j++){
			scanf(" %1d",&map[i][j]);	
		}
	}

	for(int i=0;i<N;i++){
		for(int j=0;j<N;j++){
			
			if(map[i][j]==1 && visit[i][j] ==false){
				int temp = bfs(i,j);
				ans.push_back(temp);
			}
		}
	}
	sort(ans.begin(),ans.end());
	cout << ans.size() << endl;
	for(vector<int>::iterator it=ans.begin();it!=ans.end();++it){
		cout << *it << endl;
	}
	
#if 0
	// for print array
	for(int i=0;i<N;i++){
		for(int j=0;j<N;j++){
			cout << map[i][j] << " ";	
		}
		cout << '\n';
	}
#endif
	return 0;
}
