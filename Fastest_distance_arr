#include<queue>
#include<tuple>
#include<algorithm>

void Fastest_distance(int start_x, int start_y, pair<int, int> target) {
	visit[start_x][start_y] = true;
	q.push(make_tuple(start_x, start_y, 0));
	while (!q.empty()) {
		tuple<int, int, int> current = q.front();
		q.pop();
		int now_x = get<0>(current);
		int now_y = get<1>(current);
		int now_cnt = get<2>(current);

		if (now_x == target.first && now_y == target.second) {
			cout << "FIND" << endl;
			cout << now_cnt << endl;
			break;
		}

		available[now_x][now_y] = now_cnt;
		for (int i = 0; i < 4; i++) {
			int next_x = now_x + dir[i][0];
			int next_y = now_y + dir[i][1];
			int next_cnt = now_cnt + 1;
			if (isrange(next_x, next_y) && !visit[next_x][next_y]) {
				visit[next_x][next_y] = true;
				q.push(make_tuple(next_x, next_y, next_cnt));
			}
		}
	}
}
